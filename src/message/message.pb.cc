// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Message_ConfigMessage_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Message_HeartbeatMessage_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Message_RegisterMessage_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Message_RequestMessage_message_2eproto;
namespace rpscc {
class Message_RequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_RequestMessage> _instance;
} _Message_RequestMessage_default_instance_;
class Message_ConfigMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_ConfigMessage> _instance;
} _Message_ConfigMessage_default_instance_;
class Message_RegisterMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_RegisterMessage> _instance;
} _Message_RegisterMessage_default_instance_;
class Message_HeartbeatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_HeartbeatMessage> _instance;
} _Message_HeartbeatMessage_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
}  // namespace rpscc
static void InitDefaultsMessage_RequestMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpscc::_Message_RequestMessage_default_instance_;
    new (ptr) ::rpscc::Message_RequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpscc::Message_RequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Message_RequestMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessage_RequestMessage_message_2eproto}, {}};

static void InitDefaultsMessage_ConfigMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpscc::_Message_ConfigMessage_default_instance_;
    new (ptr) ::rpscc::Message_ConfigMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpscc::Message_ConfigMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Message_ConfigMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessage_ConfigMessage_message_2eproto}, {}};

static void InitDefaultsMessage_RegisterMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpscc::_Message_RegisterMessage_default_instance_;
    new (ptr) ::rpscc::Message_RegisterMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpscc::Message_RegisterMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Message_RegisterMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessage_RegisterMessage_message_2eproto}, {}};

static void InitDefaultsMessage_HeartbeatMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpscc::_Message_HeartbeatMessage_default_instance_;
    new (ptr) ::rpscc::Message_HeartbeatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpscc::Message_HeartbeatMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Message_HeartbeatMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessage_HeartbeatMessage_message_2eproto}, {}};

static void InitDefaultsMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpscc::_Message_default_instance_;
    new (ptr) ::rpscc::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpscc::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Message_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMessage_message_2eproto}, {
      &scc_info_Message_ConfigMessage_message_2eproto.base,
      &scc_info_Message_RequestMessage_message_2eproto.base,
      &scc_info_Message_HeartbeatMessage_message_2eproto.base,
      &scc_info_Message_RegisterMessage_message_2eproto.base,}};

void InitDefaults_message_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Message_RequestMessage_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Message_ConfigMessage_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Message_RegisterMessage_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Message_HeartbeatMessage_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Message_message_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_message_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_message_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_RequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_RequestMessage, request_type_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_RequestMessage, keys_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_RequestMessage, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, worker_num_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, server_num_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, key_range_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, node_ip_port_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, partition_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, server_id_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, worker_id_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, master_id_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_ConfigMessage, bound_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_RegisterMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_RegisterMessage, ip_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_RegisterMessage, port_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_RegisterMessage, is_server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_HeartbeatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_HeartbeatMessage, is_live_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message_HeartbeatMessage, agent_epoch_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpscc::Message, send_id_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message, recv_id_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message, message_type_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message, config_msg_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message, request_msg_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message, heartbeat_msg_),
  PROTOBUF_FIELD_OFFSET(::rpscc::Message, register_msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rpscc::Message_RequestMessage)},
  { 8, -1, sizeof(::rpscc::Message_ConfigMessage)},
  { 22, -1, sizeof(::rpscc::Message_RegisterMessage)},
  { 30, -1, sizeof(::rpscc::Message_HeartbeatMessage)},
  { 37, -1, sizeof(::rpscc::Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpscc::_Message_RequestMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpscc::_Message_ConfigMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpscc::_Message_RegisterMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpscc::_Message_HeartbeatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpscc::_Message_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_message_2eproto = {
  {}, AddDescriptors_message_2eproto, "message.proto", schemas,
  file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 5, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

const char descriptor_table_protodef_message_2eproto[] =
  "\n\rmessage.proto\022\005rpscc\"\356\006\n\007Message\022\017\n\007se"
  "nd_id\030\001 \001(\005\022\017\n\007recv_id\030\002 \001(\005\0220\n\014message_"
  "type\030\003 \001(\0162\032.rpscc.Message.MessageType\0220"
  "\n\nconfig_msg\030\004 \001(\0132\034.rpscc.Message.Confi"
  "gMessage\0222\n\013request_msg\030\005 \001(\0132\035.rpscc.Me"
  "ssage.RequestMessage\0226\n\rheartbeat_msg\030\006 "
  "\001(\0132\037.rpscc.Message.HeartbeatMessage\0224\n\014"
  "register_msg\030\007 \001(\0132\036.rpscc.Message.Regis"
  "terMessage\032\252\001\n\016RequestMessage\022\?\n\014request"
  "_type\030\001 \001(\0162).rpscc.Message.RequestMessa"
  "ge.RequestType\022\014\n\004keys\030\002 \003(\005\022\016\n\006values\030\003"
  " \003(\002\"9\n\013RequestType\022\r\n\tkey_value\020\000\022\007\n\003ke"
  "y\020\001\022\007\n\003ack\020\002\022\t\n\005block\020\003\032\273\001\n\rConfigMessag"
  "e\022\022\n\nworker_num\030\001 \001(\005\022\022\n\nserver_num\030\002 \001("
  "\005\022\021\n\tkey_range\030\003 \001(\005\022\024\n\014node_ip_port\030\004 \003"
  "(\t\022\021\n\tpartition\030\005 \003(\005\022\021\n\tserver_id\030\006 \003(\005"
  "\022\021\n\tworker_id\030\010 \003(\005\022\021\n\tmaster_id\030\t \003(\005\022\r"
  "\n\005bound\030\007 \001(\005\032>\n\017RegisterMessage\022\n\n\002ip\030\001"
  " \001(\t\022\014\n\004port\030\002 \001(\005\022\021\n\tis_server\030\003 \001(\010\032<\n"
  "\020HeartbeatMessage\022\017\n\007is_live\030\001 \001(\010\022\027\n\017ag"
  "ent_epoch_num\030\002 \001(\005\"R\n\013MessageType\022\n\n\006co"
  "nfig\020\000\022\013\n\007request\020\001\022\r\n\theartbeat\020\002\022\014\n\010re"
  "gister\020\003\022\r\n\tterminate\020\004b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, InitDefaults_message_2eproto, 
  descriptor_table_protodef_message_2eproto,
  "message.proto", &assign_descriptors_table_message_2eproto, 911,
};

void AddDescriptors_message_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_message_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = []() { AddDescriptors_message_2eproto(); return true; }();
namespace rpscc {
const ::google::protobuf::EnumDescriptor* Message_RequestMessage_RequestType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool Message_RequestMessage_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_RequestMessage_RequestType Message_RequestMessage::key_value;
const Message_RequestMessage_RequestType Message_RequestMessage::key;
const Message_RequestMessage_RequestType Message_RequestMessage::ack;
const Message_RequestMessage_RequestType Message_RequestMessage::block;
const Message_RequestMessage_RequestType Message_RequestMessage::RequestType_MIN;
const Message_RequestMessage_RequestType Message_RequestMessage::RequestType_MAX;
const int Message_RequestMessage::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool Message_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_MessageType Message::config;
const Message_MessageType Message::request;
const Message_MessageType Message::heartbeat;
const Message_MessageType Message::register_;
const Message_MessageType Message::terminate;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Message_RequestMessage::InitAsDefaultInstance() {
}
class Message_RequestMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_RequestMessage::kRequestTypeFieldNumber;
const int Message_RequestMessage::kKeysFieldNumber;
const int Message_RequestMessage::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_RequestMessage::Message_RequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpscc.Message.RequestMessage)
}
Message_RequestMessage::Message_RequestMessage(const Message_RequestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_type_ = from.request_type_;
  // @@protoc_insertion_point(copy_constructor:rpscc.Message.RequestMessage)
}

void Message_RequestMessage::SharedCtor() {
  request_type_ = 0;
}

Message_RequestMessage::~Message_RequestMessage() {
  // @@protoc_insertion_point(destructor:rpscc.Message.RequestMessage)
  SharedDtor();
}

void Message_RequestMessage::SharedDtor() {
}

void Message_RequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_RequestMessage& Message_RequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Message_RequestMessage_message_2eproto.base);
  return *internal_default_instance();
}


void Message_RequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rpscc.Message.RequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  values_.Clear();
  request_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Message_RequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Message_RequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .rpscc.Message.RequestMessage.RequestType request_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_request_type(static_cast<::rpscc::Message_RequestMessage_RequestType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 keys = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_keys();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_keys(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // repeated float values = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_values();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        do {
          msg->add_values(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 29 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Message_RequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpscc.Message.RequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .rpscc.Message.RequestMessage.RequestType request_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_request_type(static_cast< ::rpscc::Message_RequestMessage_RequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_keys())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpscc.Message.RequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpscc.Message.RequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Message_RequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpscc.Message.RequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpscc.Message.RequestMessage.RequestType request_type = 1;
  if (this->request_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_type(), output);
  }

  // repeated int32 keys = 2;
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->keys(i), output);
  }

  // repeated float values = 3;
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->values().data(), this->values_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpscc.Message.RequestMessage)
}

::google::protobuf::uint8* Message_RequestMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpscc.Message.RequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rpscc.Message.RequestMessage.RequestType request_type = 1;
  if (this->request_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request_type(), target);
  }

  // repeated int32 keys = 2;
  if (this->keys_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _keys_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->keys_, target);
  }

  // repeated float values = 3;
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _values_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->values_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpscc.Message.RequestMessage)
  return target;
}

size_t Message_RequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpscc.Message.RequestMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 keys = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .rpscc.Message.RequestMessage.RequestType request_type = 1;
  if (this->request_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_RequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpscc.Message.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_RequestMessage* source =
      ::google::protobuf::DynamicCastToGenerated<Message_RequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpscc.Message.RequestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpscc.Message.RequestMessage)
    MergeFrom(*source);
  }
}

void Message_RequestMessage::MergeFrom(const Message_RequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpscc.Message.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from.request_type() != 0) {
    set_request_type(from.request_type());
  }
}

void Message_RequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpscc.Message.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_RequestMessage::CopyFrom(const Message_RequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpscc.Message.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RequestMessage::IsInitialized() const {
  return true;
}

void Message_RequestMessage::Swap(Message_RequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_RequestMessage::InternalSwap(Message_RequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  values_.InternalSwap(&other->values_);
  swap(request_type_, other->request_type_);
}

::google::protobuf::Metadata Message_RequestMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Message_ConfigMessage::InitAsDefaultInstance() {
}
class Message_ConfigMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_ConfigMessage::kWorkerNumFieldNumber;
const int Message_ConfigMessage::kServerNumFieldNumber;
const int Message_ConfigMessage::kKeyRangeFieldNumber;
const int Message_ConfigMessage::kNodeIpPortFieldNumber;
const int Message_ConfigMessage::kPartitionFieldNumber;
const int Message_ConfigMessage::kServerIdFieldNumber;
const int Message_ConfigMessage::kWorkerIdFieldNumber;
const int Message_ConfigMessage::kMasterIdFieldNumber;
const int Message_ConfigMessage::kBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_ConfigMessage::Message_ConfigMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpscc.Message.ConfigMessage)
}
Message_ConfigMessage::Message_ConfigMessage(const Message_ConfigMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      node_ip_port_(from.node_ip_port_),
      partition_(from.partition_),
      server_id_(from.server_id_),
      worker_id_(from.worker_id_),
      master_id_(from.master_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&worker_num_, &from.worker_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_) -
    reinterpret_cast<char*>(&worker_num_)) + sizeof(bound_));
  // @@protoc_insertion_point(copy_constructor:rpscc.Message.ConfigMessage)
}

void Message_ConfigMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Message_ConfigMessage_message_2eproto.base);
  ::memset(&worker_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bound_) -
      reinterpret_cast<char*>(&worker_num_)) + sizeof(bound_));
}

Message_ConfigMessage::~Message_ConfigMessage() {
  // @@protoc_insertion_point(destructor:rpscc.Message.ConfigMessage)
  SharedDtor();
}

void Message_ConfigMessage::SharedDtor() {
}

void Message_ConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_ConfigMessage& Message_ConfigMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Message_ConfigMessage_message_2eproto.base);
  return *internal_default_instance();
}


void Message_ConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rpscc.Message.ConfigMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_ip_port_.Clear();
  partition_.Clear();
  server_id_.Clear();
  worker_id_.Clear();
  master_id_.Clear();
  ::memset(&worker_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bound_) -
      reinterpret_cast<char*>(&worker_num_)) + sizeof(bound_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Message_ConfigMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Message_ConfigMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 worker_num = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_worker_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 server_num = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_server_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 key_range = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_key_range(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string node_ip_port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("rpscc.Message.ConfigMessage.node_ip_port");
          object = msg->add_node_ip_port();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated int32 partition = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_partition();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          msg->add_partition(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // repeated int32 server_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 50) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_server_id();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        do {
          msg->add_server_id(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
        break;
      }
      // int32 bound = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_bound(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 worker_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 66) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_worker_id();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        do {
          msg->add_worker_id(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
        break;
      }
      // repeated int32 master_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 74) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_master_id();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        do {
          msg->add_master_id(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Message_ConfigMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpscc.Message.ConfigMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 worker_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 key_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string node_ip_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_node_ip_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_ip_port(this->node_ip_port_size() - 1).data(),
            static_cast<int>(this->node_ip_port(this->node_ip_port_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpscc.Message.ConfigMessage.node_ip_port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partition = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partition())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_partition())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 server_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_server_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_server_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bound = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 worker_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_worker_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_worker_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 master_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_master_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_master_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpscc.Message.ConfigMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpscc.Message.ConfigMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Message_ConfigMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpscc.Message.ConfigMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 worker_num = 1;
  if (this->worker_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->worker_num(), output);
  }

  // int32 server_num = 2;
  if (this->server_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_num(), output);
  }

  // int32 key_range = 3;
  if (this->key_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->key_range(), output);
  }

  // repeated string node_ip_port = 4;
  for (int i = 0, n = this->node_ip_port_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ip_port(i).data(), static_cast<int>(this->node_ip_port(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpscc.Message.ConfigMessage.node_ip_port");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->node_ip_port(i), output);
  }

  // repeated int32 partition = 5;
  if (this->partition_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partition_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->partition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partition(i), output);
  }

  // repeated int32 server_id = 6;
  if (this->server_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_server_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->server_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->server_id(i), output);
  }

  // int32 bound = 7;
  if (this->bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bound(), output);
  }

  // repeated int32 worker_id = 8;
  if (this->worker_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_worker_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->worker_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->worker_id(i), output);
  }

  // repeated int32 master_id = 9;
  if (this->master_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_master_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->master_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->master_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpscc.Message.ConfigMessage)
}

::google::protobuf::uint8* Message_ConfigMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpscc.Message.ConfigMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 worker_num = 1;
  if (this->worker_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->worker_num(), target);
  }

  // int32 server_num = 2;
  if (this->server_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_num(), target);
  }

  // int32 key_range = 3;
  if (this->key_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->key_range(), target);
  }

  // repeated string node_ip_port = 4;
  for (int i = 0, n = this->node_ip_port_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ip_port(i).data(), static_cast<int>(this->node_ip_port(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpscc.Message.ConfigMessage.node_ip_port");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->node_ip_port(i), target);
  }

  // repeated int32 partition = 5;
  if (this->partition_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _partition_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partition_, target);
  }

  // repeated int32 server_id = 6;
  if (this->server_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _server_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->server_id_, target);
  }

  // int32 bound = 7;
  if (this->bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bound(), target);
  }

  // repeated int32 worker_id = 8;
  if (this->worker_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _worker_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->worker_id_, target);
  }

  // repeated int32 master_id = 9;
  if (this->master_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _master_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->master_id_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpscc.Message.ConfigMessage)
  return target;
}

size_t Message_ConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpscc.Message.ConfigMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string node_ip_port = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->node_ip_port_size());
  for (int i = 0, n = this->node_ip_port_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->node_ip_port(i));
  }

  // repeated int32 partition = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partition_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _partition_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 server_id = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->server_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _server_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 worker_id = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->worker_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _worker_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 master_id = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->master_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _master_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 worker_num = 1;
  if (this->worker_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_num());
  }

  // int32 server_num = 2;
  if (this->server_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_num());
  }

  // int32 key_range = 3;
  if (this->key_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key_range());
  }

  // int32 bound = 7;
  if (this->bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bound());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_ConfigMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpscc.Message.ConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_ConfigMessage* source =
      ::google::protobuf::DynamicCastToGenerated<Message_ConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpscc.Message.ConfigMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpscc.Message.ConfigMessage)
    MergeFrom(*source);
  }
}

void Message_ConfigMessage::MergeFrom(const Message_ConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpscc.Message.ConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_ip_port_.MergeFrom(from.node_ip_port_);
  partition_.MergeFrom(from.partition_);
  server_id_.MergeFrom(from.server_id_);
  worker_id_.MergeFrom(from.worker_id_);
  master_id_.MergeFrom(from.master_id_);
  if (from.worker_num() != 0) {
    set_worker_num(from.worker_num());
  }
  if (from.server_num() != 0) {
    set_server_num(from.server_num());
  }
  if (from.key_range() != 0) {
    set_key_range(from.key_range());
  }
  if (from.bound() != 0) {
    set_bound(from.bound());
  }
}

void Message_ConfigMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpscc.Message.ConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_ConfigMessage::CopyFrom(const Message_ConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpscc.Message.ConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ConfigMessage::IsInitialized() const {
  return true;
}

void Message_ConfigMessage::Swap(Message_ConfigMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_ConfigMessage::InternalSwap(Message_ConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_ip_port_.InternalSwap(CastToBase(&other->node_ip_port_));
  partition_.InternalSwap(&other->partition_);
  server_id_.InternalSwap(&other->server_id_);
  worker_id_.InternalSwap(&other->worker_id_);
  master_id_.InternalSwap(&other->master_id_);
  swap(worker_num_, other->worker_num_);
  swap(server_num_, other->server_num_);
  swap(key_range_, other->key_range_);
  swap(bound_, other->bound_);
}

::google::protobuf::Metadata Message_ConfigMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Message_RegisterMessage::InitAsDefaultInstance() {
}
class Message_RegisterMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_RegisterMessage::kIpFieldNumber;
const int Message_RegisterMessage::kPortFieldNumber;
const int Message_RegisterMessage::kIsServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_RegisterMessage::Message_RegisterMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpscc.Message.RegisterMessage)
}
Message_RegisterMessage::Message_RegisterMessage(const Message_RegisterMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_server_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_server_));
  // @@protoc_insertion_point(copy_constructor:rpscc.Message.RegisterMessage)
}

void Message_RegisterMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Message_RegisterMessage_message_2eproto.base);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_server_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_server_));
}

Message_RegisterMessage::~Message_RegisterMessage() {
  // @@protoc_insertion_point(destructor:rpscc.Message.RegisterMessage)
  SharedDtor();
}

void Message_RegisterMessage::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message_RegisterMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_RegisterMessage& Message_RegisterMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Message_RegisterMessage_message_2eproto.base);
  return *internal_default_instance();
}


void Message_RegisterMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rpscc.Message.RegisterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_server_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_server_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Message_RegisterMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Message_RegisterMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rpscc.Message.RegisterMessage.ip");
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_server = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_server(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Message_RegisterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpscc.Message.RegisterMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpscc.Message.RegisterMessage.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_server = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpscc.Message.RegisterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpscc.Message.RegisterMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Message_RegisterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpscc.Message.RegisterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpscc.Message.RegisterMessage.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // bool is_server = 3;
  if (this->is_server() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpscc.Message.RegisterMessage)
}

::google::protobuf::uint8* Message_RegisterMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpscc.Message.RegisterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpscc.Message.RegisterMessage.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // bool is_server = 3;
  if (this->is_server() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_server(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpscc.Message.RegisterMessage)
  return target;
}

size_t Message_RegisterMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpscc.Message.RegisterMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // bool is_server = 3;
  if (this->is_server() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_RegisterMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpscc.Message.RegisterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_RegisterMessage* source =
      ::google::protobuf::DynamicCastToGenerated<Message_RegisterMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpscc.Message.RegisterMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpscc.Message.RegisterMessage)
    MergeFrom(*source);
  }
}

void Message_RegisterMessage::MergeFrom(const Message_RegisterMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpscc.Message.RegisterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.is_server() != 0) {
    set_is_server(from.is_server());
  }
}

void Message_RegisterMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpscc.Message.RegisterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_RegisterMessage::CopyFrom(const Message_RegisterMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpscc.Message.RegisterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RegisterMessage::IsInitialized() const {
  return true;
}

void Message_RegisterMessage::Swap(Message_RegisterMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_RegisterMessage::InternalSwap(Message_RegisterMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(is_server_, other->is_server_);
}

::google::protobuf::Metadata Message_RegisterMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Message_HeartbeatMessage::InitAsDefaultInstance() {
}
class Message_HeartbeatMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_HeartbeatMessage::kIsLiveFieldNumber;
const int Message_HeartbeatMessage::kAgentEpochNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_HeartbeatMessage::Message_HeartbeatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpscc.Message.HeartbeatMessage)
}
Message_HeartbeatMessage::Message_HeartbeatMessage(const Message_HeartbeatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_live_, &from.is_live_,
    static_cast<size_t>(reinterpret_cast<char*>(&agent_epoch_num_) -
    reinterpret_cast<char*>(&is_live_)) + sizeof(agent_epoch_num_));
  // @@protoc_insertion_point(copy_constructor:rpscc.Message.HeartbeatMessage)
}

void Message_HeartbeatMessage::SharedCtor() {
  ::memset(&is_live_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_epoch_num_) -
      reinterpret_cast<char*>(&is_live_)) + sizeof(agent_epoch_num_));
}

Message_HeartbeatMessage::~Message_HeartbeatMessage() {
  // @@protoc_insertion_point(destructor:rpscc.Message.HeartbeatMessage)
  SharedDtor();
}

void Message_HeartbeatMessage::SharedDtor() {
}

void Message_HeartbeatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_HeartbeatMessage& Message_HeartbeatMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Message_HeartbeatMessage_message_2eproto.base);
  return *internal_default_instance();
}


void Message_HeartbeatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:rpscc.Message.HeartbeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_live_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_epoch_num_) -
      reinterpret_cast<char*>(&is_live_)) + sizeof(agent_epoch_num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Message_HeartbeatMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Message_HeartbeatMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool is_live = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_is_live(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 agent_epoch_num = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_agent_epoch_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Message_HeartbeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpscc.Message.HeartbeatMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_live = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_live_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 agent_epoch_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_epoch_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpscc.Message.HeartbeatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpscc.Message.HeartbeatMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Message_HeartbeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpscc.Message.HeartbeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_live = 1;
  if (this->is_live() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_live(), output);
  }

  // int32 agent_epoch_num = 2;
  if (this->agent_epoch_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->agent_epoch_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpscc.Message.HeartbeatMessage)
}

::google::protobuf::uint8* Message_HeartbeatMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpscc.Message.HeartbeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_live = 1;
  if (this->is_live() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_live(), target);
  }

  // int32 agent_epoch_num = 2;
  if (this->agent_epoch_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->agent_epoch_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpscc.Message.HeartbeatMessage)
  return target;
}

size_t Message_HeartbeatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpscc.Message.HeartbeatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_live = 1;
  if (this->is_live() != 0) {
    total_size += 1 + 1;
  }

  // int32 agent_epoch_num = 2;
  if (this->agent_epoch_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->agent_epoch_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_HeartbeatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpscc.Message.HeartbeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_HeartbeatMessage* source =
      ::google::protobuf::DynamicCastToGenerated<Message_HeartbeatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpscc.Message.HeartbeatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpscc.Message.HeartbeatMessage)
    MergeFrom(*source);
  }
}

void Message_HeartbeatMessage::MergeFrom(const Message_HeartbeatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpscc.Message.HeartbeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_live() != 0) {
    set_is_live(from.is_live());
  }
  if (from.agent_epoch_num() != 0) {
    set_agent_epoch_num(from.agent_epoch_num());
  }
}

void Message_HeartbeatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpscc.Message.HeartbeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_HeartbeatMessage::CopyFrom(const Message_HeartbeatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpscc.Message.HeartbeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HeartbeatMessage::IsInitialized() const {
  return true;
}

void Message_HeartbeatMessage::Swap(Message_HeartbeatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_HeartbeatMessage::InternalSwap(Message_HeartbeatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_live_, other->is_live_);
  swap(agent_epoch_num_, other->agent_epoch_num_);
}

::google::protobuf::Metadata Message_HeartbeatMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::rpscc::_Message_default_instance_._instance.get_mutable()->config_msg_ = const_cast< ::rpscc::Message_ConfigMessage*>(
      ::rpscc::Message_ConfigMessage::internal_default_instance());
  ::rpscc::_Message_default_instance_._instance.get_mutable()->request_msg_ = const_cast< ::rpscc::Message_RequestMessage*>(
      ::rpscc::Message_RequestMessage::internal_default_instance());
  ::rpscc::_Message_default_instance_._instance.get_mutable()->heartbeat_msg_ = const_cast< ::rpscc::Message_HeartbeatMessage*>(
      ::rpscc::Message_HeartbeatMessage::internal_default_instance());
  ::rpscc::_Message_default_instance_._instance.get_mutable()->register_msg_ = const_cast< ::rpscc::Message_RegisterMessage*>(
      ::rpscc::Message_RegisterMessage::internal_default_instance());
}
class Message::HasBitSetters {
 public:
  static const ::rpscc::Message_ConfigMessage& config_msg(const Message* msg);
  static const ::rpscc::Message_RequestMessage& request_msg(const Message* msg);
  static const ::rpscc::Message_HeartbeatMessage& heartbeat_msg(const Message* msg);
  static const ::rpscc::Message_RegisterMessage& register_msg(const Message* msg);
};

const ::rpscc::Message_ConfigMessage&
Message::HasBitSetters::config_msg(const Message* msg) {
  return *msg->config_msg_;
}
const ::rpscc::Message_RequestMessage&
Message::HasBitSetters::request_msg(const Message* msg) {
  return *msg->request_msg_;
}
const ::rpscc::Message_HeartbeatMessage&
Message::HasBitSetters::heartbeat_msg(const Message* msg) {
  return *msg->heartbeat_msg_;
}
const ::rpscc::Message_RegisterMessage&
Message::HasBitSetters::register_msg(const Message* msg) {
  return *msg->register_msg_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kSendIdFieldNumber;
const int Message::kRecvIdFieldNumber;
const int Message::kMessageTypeFieldNumber;
const int Message::kConfigMsgFieldNumber;
const int Message::kRequestMsgFieldNumber;
const int Message::kHeartbeatMsgFieldNumber;
const int Message::kRegisterMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpscc.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config_msg()) {
    config_msg_ = new ::rpscc::Message_ConfigMessage(*from.config_msg_);
  } else {
    config_msg_ = nullptr;
  }
  if (from.has_request_msg()) {
    request_msg_ = new ::rpscc::Message_RequestMessage(*from.request_msg_);
  } else {
    request_msg_ = nullptr;
  }
  if (from.has_heartbeat_msg()) {
    heartbeat_msg_ = new ::rpscc::Message_HeartbeatMessage(*from.heartbeat_msg_);
  } else {
    heartbeat_msg_ = nullptr;
  }
  if (from.has_register_msg()) {
    register_msg_ = new ::rpscc::Message_RegisterMessage(*from.register_msg_);
  } else {
    register_msg_ = nullptr;
  }
  ::memcpy(&send_id_, &from.send_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&send_id_)) + sizeof(message_type_));
  // @@protoc_insertion_point(copy_constructor:rpscc.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Message_message_2eproto.base);
  ::memset(&config_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&config_msg_)) + sizeof(message_type_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:rpscc.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != internal_default_instance()) delete config_msg_;
  if (this != internal_default_instance()) delete request_msg_;
  if (this != internal_default_instance()) delete heartbeat_msg_;
  if (this != internal_default_instance()) delete register_msg_;
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Message_message_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:rpscc.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_msg_ != nullptr) {
    delete config_msg_;
  }
  config_msg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && request_msg_ != nullptr) {
    delete request_msg_;
  }
  request_msg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && heartbeat_msg_ != nullptr) {
    delete heartbeat_msg_;
  }
  heartbeat_msg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && register_msg_ != nullptr) {
    delete register_msg_;
  }
  register_msg_ = nullptr;
  ::memset(&send_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&send_id_)) + sizeof(message_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 send_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_send_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 recv_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_recv_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .rpscc.Message.MessageType message_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_message_type(static_cast<::rpscc::Message_MessageType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .rpscc.Message.ConfigMessage config_msg = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rpscc::Message_ConfigMessage::_InternalParse;
        object = msg->mutable_config_msg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .rpscc.Message.RequestMessage request_msg = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rpscc::Message_RequestMessage::_InternalParse;
        object = msg->mutable_request_msg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .rpscc.Message.HeartbeatMessage heartbeat_msg = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rpscc::Message_HeartbeatMessage::_InternalParse;
        object = msg->mutable_heartbeat_msg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .rpscc.Message.RegisterMessage register_msg = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rpscc::Message_RegisterMessage::_InternalParse;
        object = msg->mutable_register_msg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpscc.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 send_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recv_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rpscc.Message.MessageType message_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::rpscc::Message_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rpscc.Message.ConfigMessage config_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rpscc.Message.RequestMessage request_msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rpscc.Message.HeartbeatMessage heartbeat_msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rpscc.Message.RegisterMessage register_msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_register_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpscc.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpscc.Message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpscc.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 send_id = 1;
  if (this->send_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->send_id(), output);
  }

  // int32 recv_id = 2;
  if (this->recv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recv_id(), output);
  }

  // .rpscc.Message.MessageType message_type = 3;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->message_type(), output);
  }

  // .rpscc.Message.ConfigMessage config_msg = 4;
  if (this->has_config_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::config_msg(this), output);
  }

  // .rpscc.Message.RequestMessage request_msg = 5;
  if (this->has_request_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::request_msg(this), output);
  }

  // .rpscc.Message.HeartbeatMessage heartbeat_msg = 6;
  if (this->has_heartbeat_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::heartbeat_msg(this), output);
  }

  // .rpscc.Message.RegisterMessage register_msg = 7;
  if (this->has_register_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::register_msg(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpscc.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpscc.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 send_id = 1;
  if (this->send_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->send_id(), target);
  }

  // int32 recv_id = 2;
  if (this->recv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recv_id(), target);
  }

  // .rpscc.Message.MessageType message_type = 3;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->message_type(), target);
  }

  // .rpscc.Message.ConfigMessage config_msg = 4;
  if (this->has_config_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::config_msg(this), target);
  }

  // .rpscc.Message.RequestMessage request_msg = 5;
  if (this->has_request_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::request_msg(this), target);
  }

  // .rpscc.Message.HeartbeatMessage heartbeat_msg = 6;
  if (this->has_heartbeat_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::heartbeat_msg(this), target);
  }

  // .rpscc.Message.RegisterMessage register_msg = 7;
  if (this->has_register_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::register_msg(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpscc.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpscc.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rpscc.Message.ConfigMessage config_msg = 4;
  if (this->has_config_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_msg_);
  }

  // .rpscc.Message.RequestMessage request_msg = 5;
  if (this->has_request_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *request_msg_);
  }

  // .rpscc.Message.HeartbeatMessage heartbeat_msg = 6;
  if (this->has_heartbeat_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heartbeat_msg_);
  }

  // .rpscc.Message.RegisterMessage register_msg = 7;
  if (this->has_register_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *register_msg_);
  }

  // int32 send_id = 1;
  if (this->send_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->send_id());
  }

  // int32 recv_id = 2;
  if (this->recv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recv_id());
  }

  // .rpscc.Message.MessageType message_type = 3;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpscc.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpscc.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpscc.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpscc.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config_msg()) {
    mutable_config_msg()->::rpscc::Message_ConfigMessage::MergeFrom(from.config_msg());
  }
  if (from.has_request_msg()) {
    mutable_request_msg()->::rpscc::Message_RequestMessage::MergeFrom(from.request_msg());
  }
  if (from.has_heartbeat_msg()) {
    mutable_heartbeat_msg()->::rpscc::Message_HeartbeatMessage::MergeFrom(from.heartbeat_msg());
  }
  if (from.has_register_msg()) {
    mutable_register_msg()->::rpscc::Message_RegisterMessage::MergeFrom(from.register_msg());
  }
  if (from.send_id() != 0) {
    set_send_id(from.send_id());
  }
  if (from.recv_id() != 0) {
    set_recv_id(from.recv_id());
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpscc.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpscc.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_msg_, other->config_msg_);
  swap(request_msg_, other->request_msg_);
  swap(heartbeat_msg_, other->heartbeat_msg_);
  swap(register_msg_, other->register_msg_);
  swap(send_id_, other->send_id_);
  swap(recv_id_, other->recv_id_);
  swap(message_type_, other->message_type_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpscc
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::rpscc::Message_RequestMessage* Arena::CreateMaybeMessage< ::rpscc::Message_RequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::rpscc::Message_RequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::rpscc::Message_ConfigMessage* Arena::CreateMaybeMessage< ::rpscc::Message_ConfigMessage >(Arena* arena) {
  return Arena::CreateInternal< ::rpscc::Message_ConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::rpscc::Message_RegisterMessage* Arena::CreateMaybeMessage< ::rpscc::Message_RegisterMessage >(Arena* arena) {
  return Arena::CreateInternal< ::rpscc::Message_RegisterMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::rpscc::Message_HeartbeatMessage* Arena::CreateMaybeMessage< ::rpscc::Message_HeartbeatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::rpscc::Message_HeartbeatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::rpscc::Message* Arena::CreateMaybeMessage< ::rpscc::Message >(Arena* arena) {
  return Arena::CreateInternal< ::rpscc::Message >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
